Id: 15
Execution Stack: [(ref(int) v1,(ref(int) v2,(int x,(int q,(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))))))))))]
Symbol Table: 
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [ref(int) v1, (ref(int) v2,(int x,(int q,(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))))))))]
Symbol Table: 
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [ref(int) v1, (ref(int) v2,(int x,(int q,(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))))))))]
Symbol Table: 
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [(ref(int) v2,(int x,(int q,(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))))))))]
Symbol Table: 
v1 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [(ref(int) v2,(int x,(int q,(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))))))))]
Symbol Table: 
v1 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [ref(int) v2, (int x,(int q,(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))))))))]
Symbol Table: 
v1 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [ref(int) v2, (int x,(int q,(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))))))))]
Symbol Table: 
v1 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [(int x,(int q,(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))))))))]
Symbol Table: 
v1 -> (0, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [(int x,(int q,(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))))))))]
Symbol Table: 
v1 -> (0, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [int x, (int q,(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))))))]
Symbol Table: 
v1 -> (0, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [int x, (int q,(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))))))]
Symbol Table: 
v1 -> (0, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [(int q,(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))))))]
Symbol Table: 
x -> 0
v1 -> (0, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [(int q,(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))))))]
Symbol Table: 
x -> 0
v1 -> (0, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [int q, (new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))))))]
Symbol Table: 
x -> 0
v1 -> (0, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [int q, (new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))))))]
Symbol Table: 
x -> 0
v1 -> (0, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (0, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [(new(v1, 20),(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (0, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [new(v1, 20), (new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (0, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [new(v1, 20), (new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (0, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 

Id: 15
Execution Stack: [(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 
1 -> 20

Id: 15
Execution Stack: [(new(v2, 30),(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 
1 -> 20

Id: 15
Execution Stack: [new(v2, 30), (newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 
1 -> 20

Id: 15
Execution Stack: [new(v2, 30), (newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (0, int)
Output: 
File Table: 
Heap: 
1 -> 20

Id: 15
Execution Stack: [(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [(newLock(x),(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [newLock(x), (fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [newLock(x), (fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [(fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))),(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))), (newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [fork((fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))), (newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 16
Execution Stack: [(fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [(newLock(q),(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 16
Execution Stack: [(fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))),(lock(x),(writeH(v1, readH(v1)*10),unlock(x))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [newLock(q), (fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 16
Execution Stack: [fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))), (lock(x),(writeH(v1, readH(v1)*10),unlock(x)))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [newLock(q), (fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 16
Execution Stack: [fork((lock(x),(writeH(v1, readH(v1)-1),unlock(x)))), (lock(x),(writeH(v1, readH(v1)*10),unlock(x)))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 16
Execution Stack: [(lock(x),(writeH(v1, readH(v1)*10),unlock(x)))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 17
Execution Stack: [(lock(x),(writeH(v1, readH(v1)-1),unlock(x)))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [(fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))),(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 16
Execution Stack: [(lock(x),(writeH(v1, readH(v1)*10),unlock(x)))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 17
Execution Stack: [(lock(x),(writeH(v1, readH(v1)-1),unlock(x)))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))), (null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 16
Execution Stack: [lock(x), (writeH(v1, readH(v1)*10),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 17
Execution Stack: [lock(x), (writeH(v1, readH(v1)-1),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [fork((fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))), (null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 16
Execution Stack: [lock(x), (writeH(v1, readH(v1)*10),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 17
Execution Stack: [lock(x), (writeH(v1, readH(v1)-1),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 16
Execution Stack: [(writeH(v1, readH(v1)*10),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 17
Execution Stack: [lock(x), (writeH(v1, readH(v1)-1),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 18
Execution Stack: [(fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [(null,(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 16
Execution Stack: [(writeH(v1, readH(v1)*10),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 17
Execution Stack: [lock(x), (writeH(v1, readH(v1)-1),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 18
Execution Stack: [(fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))),(lock(x),(writeH(v2, readH(v2)*10),unlock(x))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [null, (null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 16
Execution Stack: [writeH(v1, readH(v1)*10), unlock(x)]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 17
Execution Stack: [lock(x), (writeH(v1, readH(v1)-1),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 18
Execution Stack: [fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))), (lock(x),(writeH(v2, readH(v2)*10),unlock(x)))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [null, (null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 16
Execution Stack: [writeH(v1, readH(v1)*10), unlock(x)]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 17
Execution Stack: [lock(x), (writeH(v1, readH(v1)-1),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 18
Execution Stack: [fork((lock(x),(writeH(v2, readH(v2)+5),unlock(x)))), (lock(x),(writeH(v2, readH(v2)*10),unlock(x)))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 20
2 -> 30

Id: 15
Execution Stack: [(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 16
Execution Stack: [unlock(x)]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 17
Execution Stack: [lock(x), (writeH(v1, readH(v1)-1),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 18
Execution Stack: [(lock(x),(writeH(v2, readH(v2)*10),unlock(x)))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 19
Execution Stack: [(lock(x),(writeH(v2, readH(v2)+5),unlock(x)))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 15
Execution Stack: [(null,(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 16
Execution Stack: [unlock(x)]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 17
Execution Stack: [lock(x), (writeH(v1, readH(v1)-1),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 18
Execution Stack: [(lock(x),(writeH(v2, readH(v2)*10),unlock(x)))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 19
Execution Stack: [(lock(x),(writeH(v2, readH(v2)+5),unlock(x)))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 15
Execution Stack: [null, (null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 16
Execution Stack: []
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 17
Execution Stack: [(writeH(v1, readH(v1)-1),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 18
Execution Stack: [lock(x), (writeH(v2, readH(v2)*10),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 19
Execution Stack: [lock(x), (writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 15
Execution Stack: [null, (null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 17
Execution Stack: [(writeH(v1, readH(v1)-1),unlock(x))]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 18
Execution Stack: [lock(x), (writeH(v2, readH(v2)*10),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 19
Execution Stack: [lock(x), (writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 15
Execution Stack: [(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 17
Execution Stack: [writeH(v1, readH(v1)-1), unlock(x)]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 18
Execution Stack: [lock(x), (writeH(v2, readH(v2)*10),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 19
Execution Stack: [lock(x), (writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 15
Execution Stack: [(null,(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 17
Execution Stack: [writeH(v1, readH(v1)-1), unlock(x)]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 18
Execution Stack: [lock(x), (writeH(v2, readH(v2)*10),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 19
Execution Stack: [lock(x), (writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 200
2 -> 30

Id: 15
Execution Stack: [null, (null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 17
Execution Stack: [unlock(x)]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 18
Execution Stack: [lock(x), (writeH(v2, readH(v2)*10),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 19
Execution Stack: [lock(x), (writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 15
Execution Stack: [null, (null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 17
Execution Stack: [unlock(x)]
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 18
Execution Stack: [lock(x), (writeH(v2, readH(v2)*10),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 19
Execution Stack: [lock(x), (writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 15
Execution Stack: [(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 17
Execution Stack: []
Symbol Table: 
q -> 0
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 18
Execution Stack: [(writeH(v2, readH(v2)*10),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 19
Execution Stack: [lock(x), (writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 15
Execution Stack: [(null,(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 18
Execution Stack: [(writeH(v2, readH(v2)*10),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 19
Execution Stack: [lock(x), (writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 15
Execution Stack: [null, (lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 18
Execution Stack: [writeH(v2, readH(v2)*10), unlock(x)]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 19
Execution Stack: [lock(x), (writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 15
Execution Stack: [null, (lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 18
Execution Stack: [writeH(v2, readH(v2)*10), unlock(x)]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 19
Execution Stack: [lock(x), (writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 30

Id: 15
Execution Stack: [(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 18
Execution Stack: [unlock(x)]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 19
Execution Stack: [lock(x), (writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 15
Execution Stack: [(lock(x),(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 18
Execution Stack: [unlock(x)]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 19
Execution Stack: [lock(x), (writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 15
Execution Stack: [lock(x), (print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 18
Execution Stack: []
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 19
Execution Stack: [(writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 15
Execution Stack: [lock(x), (print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 19
Execution Stack: [(writeH(v2, readH(v2)+5),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 15
Execution Stack: [lock(x), (print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 19
Execution Stack: [writeH(v2, readH(v2)+5), unlock(x)]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 15
Execution Stack: [lock(x), (print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 19
Execution Stack: [writeH(v2, readH(v2)+5), unlock(x)]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 300

Id: 15
Execution Stack: [lock(x), (print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 19
Execution Stack: [unlock(x)]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [lock(x), (print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 19
Execution Stack: [unlock(x)]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [lock(x), (print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 19
Execution Stack: []
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [lock(x), (print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [(print(readH(v1)),(unlock(x),(lock(x),(print(readH(v2)),unlock(x)))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [print(readH(v1)), (unlock(x),(lock(x),(print(readH(v2)),unlock(x))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [print(readH(v1)), (unlock(x),(lock(x),(print(readH(v2)),unlock(x))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [(unlock(x),(lock(x),(print(readH(v2)),unlock(x))))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [unlock(x), (lock(x),(print(readH(v2)),unlock(x)))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [unlock(x), (lock(x),(print(readH(v2)),unlock(x)))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [(lock(x),(print(readH(v2)),unlock(x)))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [(lock(x),(print(readH(v2)),unlock(x)))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [lock(x), (print(readH(v2)),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [lock(x), (print(readH(v2)),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [(print(readH(v2)),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [(print(readH(v2)),unlock(x))]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [print(readH(v2)), unlock(x)]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [print(readH(v2)), unlock(x)]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [unlock(x)]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
305
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: [unlock(x)]
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
305
File Table: 
Heap: 
1 -> 199
2 -> 305

Id: 15
Execution Stack: []
Symbol Table: 
q -> 1
x -> 0
v1 -> (1, int)
v2 -> (2, int)
Output: 
199
305
File Table: 
Heap: 
1 -> 199
2 -> 305

